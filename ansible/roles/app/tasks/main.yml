---

- name: Install packages 1
  ansible.builtin.yum:
    state: present
    name: 
      - "centos-release-scl"
      - "centos-release-scl-rh"
      - "ca-certificates"
      - "epel-release"
      - "@development tools"

- name: Install ruby
  ansible.builtin.yum:
    state: present
    enablerepo: centos-sclo-rh
    name: 
      - "rh-ruby26"
      - "rh-ruby26-scldevel"
      - "rh-ruby26-ruby-devel"
      - "rh-ruby26-rubygem-bundler"

- name: Install packages 2
  ansible.builtin.yum:
    update_cache: yes
    state: present
    name: 
      - "make"
      - "gcc"
      - "gcc-c++"
      - "kernel-devel"
      - "postgresql-devel"
      - "libxml2-devel"
      - "libxslt-devel"
      - "libxml2"
      - "libxslt"
      - "zlib"
      - "nodejs"
      - "libyaml"

- name: Add user
  ansible.builtin.user:
    name: "{{ APP_USER }}"
    shell: /bin/bash
    groups: wheel
    append: yes

# Проверить необходимость этой группы
- name: Add wheel for user
  ansible.builtin.copy:
    content: "%wheel ALL=(ALL:ALL) NOPASSWD:ALL"
    dest: "/etc/sudoers.d/wheel_nopasswd"
    mode: 0440

- name: Add sub dir for socket puma
  ansible.builtin.file:
    path: "/var/run/puma/"
    state: directory
    owner: "{{APP_USER}}"

- name: Create application dir
  ansible.builtin.file:
    path: "{{APP_FOLDER}}"
    state: directory
    owner: "{{APP_USER}}"
    group: "{{APP_USER}}"

- name: Copy application
  become_user: "{{APP_USER}}"
  ansible.builtin.copy:
    src: "{{APP_REPO_LOCAL}}/"
    dest: "{{APP_FOLDER}}"
    owner: "{{APP_USER}}"
    group: "{{APP_USER}}"

- name: "Bundle config and install"
  become: true
  become_user: "{{APP_USER}}"
  block:
    # Невероятные костыли для ruby
    - name: Add to PATH
      ansible.builtin.copy:
        content: |
          source scl_source enable rh-ruby26
          export GEM_HOME="$(ruby -e 'puts Gem.user_dir')"
          export PATH="$PATH:$GEM_HOME/bin"
          export BUNDLE_GEMFILE="{{APP_FOLDER}}/Gemfile"
        dest: "/home/{{APP_USER}}/.bashrc"

    - name: "Install bundler and nokogiri"
      ansible.builtin.shell: |
        source /home/{{APP_USER}}/.bashrc && gem install bundler:1.16.2 nokogiri:1.8.2
      args:
        chdir: "{{APP_FOLDER}}" 
        executable: /bin/bash

    - name: "Bundle config"
      ansible.builtin.shell: |
        source /home/{{APP_USER}}/.bashrc && bundle config build.nokogiri --use-system-libraries
      args:
        chdir: "{{APP_FOLDER}}"
        executable: /bin/bash

    - name: "Bundle install"
      ansible.builtin.shell: |
        source /home/{{APP_USER}}/.bashrc && bundle install --no-cache --without development
      args:
        chdir: "{{APP_FOLDER}}"
        executable: /bin/bash
      register: command_result
      failed_when: "command_result.stderr != ''"
      changed_when: "command_result.stderr == ''"

    - name: "Bundle clean"
      ansible.builtin.shell: |
        source /home/{{APP_USER}}/.bashrc && bundle clean --force
      args:
        chdir: "{{APP_FOLDER}}"
        executable: /bin/bash

- name: "Setting systemd"
  block:
    - name: Add service
      ansible.builtin.template:
        src: "templates/service.j2"
        dest: "/etc/systemd/system/{{APP_NAME}}.service"
        owner: root
        group: root 
        mode: 0664

    - name: Systemd reload
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Start service
      ansible.builtin.service:
        name: "{{APP_NAME}}"
        state: started



